reset;
option randseed 0;

model ./ourmodel2.mod;
data ./instances2/bis/jeandet.dat;

param iteration default 1;
param maxit integer, default 1000;
param contcuts default 0;
param cuts default 0;
param time_relaxed default 0;
param time_inner default 0;
param cont default 1;

option gurobi_options "NonConvex=2"; # timelim=14400";
option solver 'gurobi';

problem relaxed:
x, v, obj_fun, simplex_x, cut;

problem inner:
y, obj_inner, simplex_y;

let nc := 0;

repeat{
    printf "Iteration %s, solving current relaxation.\n\n", iteration;
    printf "***********Solving Relaxed problem***********\n";
    solve relaxed;
    let time_relaxed := time_relaxed + _solve_time;
    display time_relaxed;
    #if solve_result != 'solved' then {let v:=-1000; let{i in V} x[i]:=1/n;}
    #let {i in V} x_star[i] := x[i];
    if solve_result!= 'solved' then #in order not to generate always the same x and v whenever the resolution of 'relaxed' fails
        {let v :=-1000*Uniform(0.5,1); let{i in V} x[i]:=0; let {i in V:i!=cont} x[i]:=(1/n)*Uniform(0,1); let x[cont]:=(1-sum{i in V}x[i]);
         if cont<n then {let cont:=cont+1};}
    let {i in V} x_star[i] := x[i];

    printf "++++++++++Solving Lower Level problem+++++++++++++\n";
    solve inner;
    let time_inner := time_inner + _solve_time;
    display time_inner;

    if solve_result != 'solved' then {let {i in V} y[i]:=1/n;}
    if obj_inner < - 5e-6 - v + 0.5*sum{i in V}(sum{j in V}(x[i]*x[j]*Q1[i,j]))+ sum{i in V}(q1[i]*x[i]) then
    {
        printf "violation (it should be >= -5e-6)";
        print obj_inner -(- v + 0.5*sum{i in V}(sum{j in V}(x[i]*x[j]*Q1[i,j]))+ sum{i in V}(q1[i]*x[i]));
        let nc := nc + 1; let {i in V} y_inner[nc,i] := y[i];  printf "Added a cut.\n"; let cuts := cuts +1;
    }

    if contcuts == cuts then
    {
        printf "We have no violation (it is >= -5e-6)";
        print  obj_inner -(- v + 0.5*sum{i in V}(sum{j in V}(x[i]*x[j]*Q1[i,j]))+ sum{i in V}(q1[i]*x[i]));
        printf 'No cut has been added.\n';
        break;
    }
    else {let contcuts := cuts;}

    if time_relaxed+time_inner >= 18000 then {print "time limit exceeded" >> ./secondapplication_x.txt; print "Time limit exceeded"; break;}

    if iteration == maxit then break;

    let iteration := iteration + 1;
}

display x, y, v, _total_solve_time, iteration;
display time_relaxed, time_inner;
print "%time to solve relaxed problem: ";
display time_relaxed/_total_solve_time;
print "%time to solve inner problem: ";
display time_inner/_total_solve_time;
#**************
printf "*********** " >> ./secondapplication_x.txt;
printf "jean_det ***********\n">> ./secondapplication_x.txt;
display  v, _total_solve_time, iteration >> ./secondapplication_x.txt;
print "%time to solve relaxed problem: " >> ./secondapplication_x.txt;
display time_relaxed/_total_solve_time >> ./secondapplication_x.txt;
print "%time to solve inner problem: " >> ./secondapplication_x.txt;
display time_inner/_total_solve_time >> ./secondapplication_x.txt;